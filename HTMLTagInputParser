#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
#include <unordered_map>
#include <list>

using std::cout, std::cin, std::endl, std::string, std::vector, std::isalpha, std::isdigit, std::isspace, std::unordered_map, std::pair;


int InputValidCheck(){
    int input;
    int count; // Prevent infite loop.
    while(count <= 30){
        cin>>input;
        if ( input <= 20 && input >= 1) {
            return input;
        }
        count++;
        cout<<"Invalid entry. Please try again."<<endl;
    }
    return 0;
}

int SetQueryAmount(){
    int Q;
    //cout<<"How many time will you need to parse the data?"<<endl;
    Q = InputValidCheck();
    return Q;
}

int SetTagAmount(){
    int N;
    //cout<<"How many lines are you needing to be parsed? Enter a number between 1 - 20"<<endl;
    N = InputValidCheck();
    return N;
}

void SetUserInputTags(const size_t& numberOfTags, unordered_map<string, unordered_map<string, string>>& tagMap){
    for(size_t i = 0; i < numberOfTags; i++){
        string inputTag;
        getline(cin, inputTag); //cin
        size_t quoteMarkCount = 0;
        size_t attrCount = 0;
        bool bTagNameCreated = false;
        bool bTagAttrCreated = false;
        string inputTagName;
        string inputTagAttr;
        string inputTagAttrValue;
        unordered_map<string, string> attrValueMap;
        vector<char> inputTagVec;
        for(char value : inputTag){ //Start Parse into vector
            if (isalpha(value) || isdigit(value)){
                inputTagVec.push_back(value);
            }
            if(isspace(value) && attrCount < 2){
                attrCount++; 
            }
            if (value == '=' && attrCount < 2) {
                attrCount++; 
            }
            if(bTagNameCreated == true && bTagAttrCreated == false && value == '='){
                inputTagAttr = string(inputTagVec.begin(), inputTagVec.end());
                bTagAttrCreated = true;
                inputTagVec.clear();
            }
            if(attrCount == 1 && bTagNameCreated == false){
                inputTagName = string(inputTagVec.begin(), inputTagVec.end());
                bTagNameCreated = true;
                inputTagVec.clear();
            }
            if (value == '"'){
                ++quoteMarkCount;
            }
            if(quoteMarkCount == 2 && value == '"'){
                inputTagAttrValue = string(inputTagVec.begin(), inputTagVec.end());
                attrValueMap.insert(pair<string, string>(inputTagAttr,inputTagAttrValue));
                tagMap.insert(pair<string, unordered_map<string, string>>(inputTagName,attrValueMap));
                inputTagVec.clear();
                quoteMarkCount = 0;
                attrCount = 2;
            } 
            if (value == '>'){ //End of Tag.
                inputTagVec.clear();
            } 
            if (value == '/'){ //End tags.
                inputTagVec.clear();
                break;
            }
        }
    } 
}

void SetUserInputQueries(const size_t& numberOfQueries){
    for(int i = 0; i < numberOfQueries; i++){
        cout<<"InputQueries: "<<numberOfQueries<<endl;
    }
}

int main() {
    size_t Q;
    size_t N;
    unordered_map<string, unordered_map<string, string>> tagMap;
    N = SetTagAmount();
    Q = SetQueryAmount();
    SetUserInputTags(N, tagMap);
    for(auto const &[outer_key, inner_map] : tagMap) {
        cout<<"Outer Key: "<<outer_key<<", ";
        for(auto const &[inner_key, inner_value] : inner_map) {
            cout<<"Inner Key: "<<inner_key<<", "<<"Inner Value: "<<inner_value;
        }
        cout<<endl;
    }
    SetUserInputQueries(Q);
    return 0;
}
